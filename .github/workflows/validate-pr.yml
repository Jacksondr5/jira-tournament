name: Validate PR
on:
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.head.sha }}

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read Node.js version from .nvmrc
        id: nvmrc
        shell: bash
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_ENV

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.nvmrc.outputs.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-store
        shell: bash
        run: echo "PNPM_STORE=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.pnpm-store.outputs.PNPM_STORE }}
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

      - name: Lint
        run: pnpm lint

      - name: Get changed files
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            shouldDisableTurboSnap:
              - tailwind.config.ts

      - name: Publish to Chromatic
        uses: chromaui/action@latest
        with:
          exitOnceUploaded: true
          exitZeroOnChanges: true
          onlyChanged: ${{ steps.changes.outputs.shouldDisableTurboSnap }}
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
